{"version":3,"sources":["serviceWorker.js","helpers/history.js","components/header.js","components/DeviceHome.js","routers/AppRouter.js","constants/deviceConstants.js","reducers/transmitReducer.js","reducers/index.js","store/configureStore.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","history","createBrowserHistory","basename","process","Header","className","React","Component","connect","DeviceHome","props","e","preventDefault","useEffect","a","webcard","readers","_readers","toString","getReaders","type","onClick","this","handleButtonClick","disabled","connectedDeviceHome","AppRouter","dispatch","listen","action","pathname","exact","path","component","connectedApp","alert","userConstants","INIT_REQUEST","INIT_SUCCESS","INIT_FAILURE","initialState","rootReducer","combineReducers","transmitData","APPROVE_REQUEST","APPROVE_SUCCESS","approveStatus","authID","user","APPROVE_FAILURE","APPROVE_RESET","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d0f46cc5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from \"history\";\r\nexport const history = createBrowserHistory({\r\n  basename: process.env.PUBLIC_URL\r\n});","import React from \"react\";\r\nimport \"../styles/main.css\";\r\nimport { connect } from \"react-redux\";\r\n// import \"../styles/mobile.css\";\r\n// import \"../styles/tablet.css\";\r\n// import \"../styles/mediumdevice.css\";\r\n// import logo from \"../resources/Hid.png\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header className=\"main-header\">\r\n        <p>Welcome to world</p>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  // const { user } = state.authentication;\r\n  // const { firstname, username, address } = state.searchUser;\r\n  return {\r\n    // user,\r\n    // firstname,\r\n    // address,\r\n    // username\r\n  };\r\n}\r\n\r\nconst HeaderComponent = connect(mapStateToProps)(Header);\r\nexport { HeaderComponent as Header };","import React from \"react\";\r\n// import Loader from \"../components/Loader\";\r\n// import Loginimg from \"../resources/Login.png\";\r\n// import Header from \"../components/header\";\r\n// import BankLogin from \"../resources/BankLogin.jpg\";\r\n// import { deviceActions } from \"../../actions\";\r\nimport { useState, useEffect } from 'react';\r\nimport { connect } from \"react-redux\";\r\n// import { userConstants } from \"../constants\";\r\n\r\nclass DeviceHome extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleButtonClick(e) {\r\n    e.preventDefault();\r\n    // dispatch(deviceActions.\r\n    useEffect(() => {\r\n        async function getReaders() {\r\n            const _readers = await navigator.webcard.readers();\r\n            console.log(\"CHKRY READERS:\"+_readers.toString());\r\n        }\r\n        getReaders();\r\n     }, [])\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <Header /> */}\r\n        <p> welcome to the world</p>\r\n        <button\r\n                  type=\"submit\"\r\n                  className=\"submitnewpayee\"\r\n                  onClick={this.handleButtonClick}\r\n                  disabled={null}\r\n                >Fetch Readers\r\n                </button>\r\n\r\n               <div>\r\n                   List of Readers\r\n                   </div> \r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction mapStateToProps(state) {\r\n//   const { userStatus } = state.searchUser;\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nconst connectedDeviceHome = connect(mapStateToProps)(DeviceHome);\r\nexport { connectedDeviceHome as DeviceHome };\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { history } from \"../helpers\";\r\nimport { connect } from \"react-redux\";\r\nimport {DeviceHome} from \"../components\";\r\n\r\nclass AppRouter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const { dispatch } = this.props;\r\n        history.listen((location, action) => {\r\n\r\n            let locationPathname = location.pathname;\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={DeviceHome} />\r\n                    </Switch>\r\n                </Router>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const { alert } = state;\r\n    return {\r\n        alert\r\n    };\r\n}\r\nconst connectedApp = connect(mapStateToProps)(AppRouter);\r\nexport { connectedApp as AppRouter };            \r\n","export const userConstants = {\r\n    INIT_REQUEST: \"USERS_INIT_REQUEST\",\r\n    INIT_SUCCESS: \"USERS_INIT_SUCCESS\",\r\n    INIT_FAILURE: \"USERS_INIT_FAILURE\",\r\n}","import { userConstants } from '../constants';\r\n\r\nconst initialState = {};\r\n\r\nexport function transmitData(state = initialState, action) {\r\n  switch (action.type) {\r\n    case userConstants.APPROVE_REQUEST:\r\n      return {\r\n        approveStatus: true,\r\n        authID: action.user\r\n      };\r\n    case userConstants.APPROVE_SUCCESS:\r\n      return {\r\n        approveStatus: true,\r\n        authID: action.user\r\n      };\r\n    case userConstants.APPROVE_FAILURE:\r\n      return {\r\n          approveStatus:false\r\n      };\r\n    case userConstants.APPROVE_RESET:\r\n      return {\r\n          approveStatus:false\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport {transmitData} from \"./transmitReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    transmitData,\r\n  });\r\n  \r\n  export default rootReducer;","\r\n/**\r\n * The file is used for creating redux store and logger calls createStore function\r\n */\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppRouter } from \"./routers/AppRouter\";\n// import registerServiceWorker from \"./registerServiceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/configureStore\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppRouter />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// registerServiceWorker();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}